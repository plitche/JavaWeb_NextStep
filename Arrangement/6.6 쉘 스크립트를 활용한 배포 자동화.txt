	6.6 쉘 스크립트를 활용한 배포 자동화
		6.6.1 요구사항
			* 지금까지 구현한 기능을 개발 서버에 콤캣 서버를 설치한 후 배포한다.
			* 서버가 정상적으로 실행되고 있는지 톰캣 로그 파일(catalina.out)을 통해 모니터링한다.
			* 쉘 스크립트를 만들어 배포 과정을 자동화한다.
			
		6.6.2 힌트
			6.6.2.1 톰캣 서버 설치
				* http://tomcat.apache.org/ 에서 Tomcat 8.0.x 버전을 다운로드 한다.
				* 압축만 풀면 설치는 완룐된다.
				* 톰캣의 기본 포트는 8080이다. 포트를 바꾸고 싶으면 TOMCAT_HOME/conf/server.xml 파일에서 설정을 변경한다.
				* TOMCAT_HOME/bin/startup.sh를 실행해 서버를 시작한다.
				* 브라우저로 서버에 접속해 고양이 그림이 나타나는지 확인한다.
				  서버는 정상적으로 시작했는데 접소이 되지 않으면 톰캣 서버의 포트에 대한 방화벽이 해제되어 있는지 확인한다.
				* TOMCAT_HOME/bin/shutdown.sh를 실행해 서버를 종료한다.
				
			6.6.2.2 실습 코드 배포
				* 계정 Home 디렉토리에 jwp-basic GIthub 저장소를 clone한다.
					- git clone
				* clone한 디렉토리로 이동
				* 배포할 브랜치를 변경한다
					- git checkout -b $BRANCH_NAME origin/$BRANCH_NAME
				* 저장소 디렉토리에서 mvn clean package 명령을 실행해 프로젝트를 빌드한다.
				* 빌드 중 java.net.UnkownHostException: javaweb-01와 같은 에러가 발생할 경우 설정 추가
					- sudo vi /etc/hosts
					- 127.0.0.1 javaweb-01로 호스트 설정
				* TOMCAT_HOME/webapps 디렉토리의 ROOT 디렉토리 삭제
				* jwp-basic/target/jwp-basic 디렉토리를 TOMCAT_HOME/webapps 디렉토리에 ROOT 이름으로 이동
				* TOMCAT_HOME/bin/startup.sh를 실행해 서버를 시작
				* 웹 브라우저를 통해 접근이 가능한지 확인
			
			6.6.2.3 톰캣 서버 로그 모니터링
				* 서버가 정상적으로 실행되고 있는지 log파일을 통해 모니터링한다.
					- TOMCAT_HOME/logs 디렉토리의 catalina.out 파일이 로그 파일
					- tail 명령을 통해 catalina.out 로그 파일을 모니터링한다.
					
			6.6.2.4 쉘 스크립트를 통해 배포 자동화
				* 계정 Home 디렉토리에 deploy.sh 파일을 만들어 쉘 스크립트를 작성한다.
					- #!/bin/bash => 첫 라인은 사용할 쉘을 지정
					- cd ~/jwp-basic => 시스템 명령을 그대로 사용
					- git pull
					- 이와같은 방법으로 앞에서 수동으로 진행한 과정을 스크립트로 작성한다.
					
				* 쉘 스크립트는 다음과 같이 변수 설정과 사용이 가능하다.
					- REPOSITORIES_DIR=~/repositries/jwp-basic
					- cd $REPOSITORIES_DIR
				* chmod 755 deploy.sh 명령을 실행해 실행 권한을 부여한다.
				* ./deploy.sh 실행한다.
				
				
			* 영상
				- https://youtu.be/ZsiO27LeW34 : 서버에 톰캣 서버를 설치, 설정하고 톰캣 서버가 정상적으로 실행 되는지 확인
				- https://youtu.be/9Rr4gMRyUtQ : 톰캣 서버에 대한 기본적인 설명 및 디렉토리별 용도
				- https://youtu.be/bzM1WL4qdoA : 톰캣에 웹 어플리케이션을 배포하는 과정, 메이븐을 통해 빌드하고 빌드한 프로젝트를 톰캣에 수동으로 배포
				
				자바 웹 애플리케이션을 배포하는 방법은 war파일을 만들어서 배포하는 방법과 war 파일로 묶지않고 디렉토리 자체를 배포하는 두가지 방법이 있다.
				소스코드를 빌드/배포하는 과정에서 수많은 반복 작업이 발생한다. 반복작업은 사람의 실수를 유발하고 이는 대규모 장애로 이어진다.
				떄문에 컴퓨터를 통해 자동화 하는것이 가장 안전한다.
				
				- Https://youtu.be/U7tZnEiYJyE : 배포 과정에서 발생하는 반복 과정에 대한 설명, 쉘 스크립트 파일을 만들어 배포 과정을 자동화하는 방법
				
			
			
			
			